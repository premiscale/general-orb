description: |
  Generate GitHub releases automatically when a repository is tagged. Requires a context with $GITHUB_TOKEN set.
executor: << parameters.executor >>
resource_class: << parameters.resource-class >>
parameters:
  resource-class:
    type: enum
    enum:
      - small
      - medium
      - large
      - xlarge
      - 2xlarge
      - premiscale/small
      - premiscale/medium
    default: small
    description: Resource class to run as.
  executor:
    description: Executor image to run as.
    default: default
    type: executor
  gh-version:
    description: |
      Version of the GitHub (gh) CLI to install.

      https://github.com/cli/cli/releases
    type: string
    default: '2.28.0'
  token:
    description: GitHub token to use with the gh-client.
    type: string
    default: $GITHUB_TOKEN
  github-organization:
    description: GitHub organization / CircleCI namespace.
    type: string
    default: $CIRCLE_ORGANIZATION
  github-project-name:
    description: GitHub project name.
    type: string
    default: $CIRCLE_PROJECT_REPONAME
  cosign:
    description: Cosign releases. This flag also enables caching, so be sure to enable caching on other artifacts-generating jobs.
    type: boolean
    default: false
  cosign-version:
    description: Cosign release version to install.
    type: string
    default: 2.2.4
  cosign-key:
    description: Private key to sign artifacts with.
    type: string
    default: $COSIGN_PRIVATE_KEY
  cosign-artifacts-directory:
    description: Directory in which artifacts are stored that need to be signed prior to release.
    type: string
    default: /artifacts
  cosign-docker-image-tag:
    description: |+
      Docker image tag to sign. At this time, this orb only supports signing one Docker image.

      Note: Docker images are not uploaded as artifacts with the release.
    type: string
    default: ''
steps:
  - checkout
  - run:
      name: Install gh CLI
      command: |+
        wget https://github.com/cli/cli/releases/download/v<< parameters.gh-version >>/gh_<< parameters.gh-version >>_linux_amd64.deb -O gh.deb
        sudo dpkg -i gh.deb
  # This branch generates releases with both artifacts uploaded and signing-related artifacts with cosign.
  - when:
      condition: << parameters.cosign >>
      steps:
        - run:
            name: Install cosign CLI
            command: |+
              wget https://github.com/sigstore/cosign/releases/download/v<< parameters.cosign-version >>/cosign-linux-amd64 -O cosign
              sudo install cosign /usr/bin/cosign
              rm cosign
        - restore_cache:
            keys:
              - cosign-<< pipeline.
        - run:
            name: Generate cosign artifacts for release upload
            command: |+
              (
                  cd "<< parameters.cosign-artifacts-directory >>" || exit 1 \
                  && find . -type f -exec cosign sign --key env://"<< parameters.cosign-key >>" {} \; \
                  && ls -lash
              )
        # If there are user-specified docker artifacts, sign those too, but don't upload them.
        - when:
            condition: << parameters.cosign-docker-image-tag >>
            steps:
              - run:
                  name: Sign Docker image
                  command: |+
                    cosign sign --key env://"<< parameters.cosign-key >>" << parameters.cosign-docker-image-tag >>
        # Generate the release and upload artifacts.
        - run:
            name: Generate release
            command: |+
              # Get latest tag.
              git fetch --all --tags
              export LATEST_TAG="$(git tag | sort -V | tail -1)"
              printf "Latest detected tag: %s\\n" "$LATEST_TAG"

              # Generate release from tag.
              printf "<< parameters.token >>" | gh auth login --with-token 2>/dev/null || true
              gh repo set-default "<< parameters.github-organization >>"/"<< parameters.github-project-name >>"
              gh release create "$LATEST_TAG" --notes "Release $LATEST_TAG" --title "Release $LATEST_TAG" --notes-file "<< parameters.cosign-artifacts-directory >>/release-notes.md" --attach "<< parameters.cosign-artifacts-directory >>/*"
  # This is the typical release generation step with no artifacts (just the standard source tarballs).
  - unless:
      condition: << parameters.cosign >>
      steps:
        - run:
            name: Generate release
            command: |+
              # Get latest tag.
              git fetch --all --tags
              export LATEST_TAG="$(git tag | sort -V | tail -1)"
              printf "Latest detected tag: %s\\n" "$LATEST_TAG"

              # Generate release from tag.
              printf "<< parameters.token >>" | gh auth login --with-token 2>/dev/null || true
              gh repo set-default "<< parameters.github-organization >>"/"<< parameters.github-project-name >>"
              gh release create "$LATEST_TAG" --generate-notes